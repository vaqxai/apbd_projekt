@inject HttpClient Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using apbd_projekt.Shared
@attribute [Authorize]

<div class="input-group mb-3">
	<span class="input-group-text" id="basic-addon1">Search</span>
	<input 
		type="text"
		@bind="@CurrentValue"
		@onclick="@((e) => { EmptySearchField(); })" @oninput="@(async (e) => {
			if(e.Value != null)
				await ProcessValueEntry((string) e.Value); 
		})"
		class="form-control"
		id="input_ticker"
		placeholder="Company Symbol"
	>
</div>

@if(DisplayTickerDetails)
{
	<div class="btn-group float-end">
		<button class="btn btn-group btn-primary">Add to Watchlist</button>
		<button class="btn btn-group btn-md btn-secondary" @onclick="@((e) => { StopDisplayingTickerDetails(); })">Return</button>
	</div>

	<StockDetails stockSearchResult="@CurrentlyDisplayedStock"/>
}
else
{
<div class="list-group">
		@if (Stocks != null)
		{
			@if (CurrentValue.Count() > 1 && Stocks.Count > 0)
			{
				@foreach (var gameText in (from stock in Stocks where stock.Ticker.ToLower().Contains(CurrentValue.ToLower()) || stock.Name.ToLower().Contains(CurrentValue.ToLower()) select stock.Ticker).ToList())
				{
					<a type="button" class="list-group-item list-group-item-action" @onclick="@((e) => { DoDisplayTickerDetails(gameText); })"> <span class="badge bg-secondary col-md-1"> @gameText </span> <span class="col-md-1">@GetStockQuickInfo(gameText)</span> </a>
				}
			}
		}
	</div>
}


@code {

	#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

	public bool DisplayTickerDetails = false;
	public ICollection<SimpleStock>? Stocks { get; set; }
	public SimpleStock CurrentlyDisplayedStock;
	public string CurrentValue = "";

	public void EmptySearchField()
	{
		CurrentValue = "";
		Stocks = null; // reset list
		StopDisplayingTickerDetails();
	}

	public async Task ProcessValueEntry(string newVal)
	{
		if(DisplayTickerDetails)
		{
			StopDisplayingTickerDetails();
		}

		CurrentValue = newVal;

		if(newVal.Count() >= 2) 
		// try to limit api calls, only send a search request when two or more letters are entered
		{
			Stocks = await FetchTickers(newVal);
			StateHasChanged();
		}

	}

	public SimpleStock GetStockObject(string ticker)
	{
		if(Stocks != null)
		{
			var stock = Stocks.FirstOrDefault(s => s.Ticker == ticker);
			if (stock == null)
			{
				throw new Exception("Stock object not found");
			}
			return stock;
		} else
		{
			throw new Exception("Stocks list is null");
		}

	}

	public string GetStockQuickInfo(string ticker)
	{
		var stock = GetStockObject(ticker);
		return stock.Name + " (" + stock.PrimaryExchange + ")";
	}

	public void DoDisplayTickerDetails(string ticker)
	{
		DisplayTickerDetails = true;
		CurrentlyDisplayedStock = GetStockObject(ticker);
	}

	public void StopDisplayingTickerDetails()
	{
		DisplayTickerDetails = false;
	}

	public async Task<ICollection<SimpleStock>> FetchTickers(string tickerPart)
	{
		var tickers = await Http.GetFromJsonAsync<SimpleStock[]>("api/stocks/search?query=" + tickerPart);

		if(tickers == null)
		{		
			return new List<SimpleStock>(); // empty list if nothing found
		}

		return tickers;
	}
}
