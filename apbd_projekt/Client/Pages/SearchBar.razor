@inject HttpClient Http

<div class="input-group mb-3">
	<span class="input-group-text" id="basic-addon1">Search</span>
	<input type="text" @bind="@CurrentValue" @onclick="@((e) => { EmptySearchField(); })" @oninput="@((e) => { ProcessValueEntry((string)e.Value); })" class="form-control" id="input_ticker" placeholder="Company Symbol">
</div>

@if(DisplayTickerDetails)
{
	<h3>Here be details</h3>
}
else
{
<div class="list-group">
		@if (Stocks != null)
		{
			@if (CurrentValue.Count() > 1 && Stocks.Count > 0)
			{
				@foreach (var gameText in (from stock in Stocks where stock.Ticker.ToLower().Contains(CurrentValue.ToLower()) || stock.Name.ToLower().Contains(CurrentValue.ToLower()) select stock.Ticker).ToList())
				{
					<a type="button" class="list-group-item list-group-item-action" @onclick="@((e) => { DoDisplayTickerDetails(gameText); })"> <span class="badge bg-secondary"> @gameText </span> @GetStockQuickInfo(gameText) </a>
				}
			}
		}
	</div>
}


@code {

	public bool DisplayTickerDetails = false;
	public string CurrentValue = "";

	public void EmptySearchField()
	{
		CurrentValue = "";
		Stocks = null; // reset list
		StopDisplayingTickerDetails();
	}

	public async Task ProcessValueEntry(string newVal)
	{
		if(DisplayTickerDetails)
		{
			StopDisplayingTickerDetails();
		}

		CurrentValue = newVal;

		if(newVal.Count() >= 2) 
		// try to limit api calls, only send a search request when two or more letters are entered
		{
			Stocks = await FetchTickers(newVal);
			StateHasChanged();
		}

	}

	public string GetStockQuickInfo(string ticker)
	{
		var stock = Stocks.FirstOrDefault(s => s.Ticker == ticker);
		return stock.Name + " (" + stock.PrimaryExchange + ")";
	}

	public void DoDisplayTickerDetails(string ticker)
	{
		CurrentValue = ticker;
		DisplayTickerDetails = true;
	}

	public void StopDisplayingTickerDetails()
	{
		DisplayTickerDetails = false;
	}

	public async Task<ICollection<Stock>> FetchTickers(string tickerPart)
	{
		//TODO: Remove null ref
		return await Http.GetFromJsonAsync<Stock[]>("api/stocks?search=" + tickerPart);
	}

	public class Stock
	{
		public string Ticker { get; set; }
		public string Name { get; set; }
		public string PrimaryExchange { get; set; }
	}

	public ICollection<Stock> Stocks { get; set; }
}
